{"task_id": "algo_quick_sort", "type": "algorithm_implementation", "source": "algorithm_collection", "problem_statement": "Implement the Quick Sort algorithm, which is a Sorting algorithm.", "context": {"description": "Divide-and-conquer sorting algorithm", "time_complexity": "O(n log n)", "space_complexity": "O(log n)"}, "solution": {"language": "Python", "code": "def quicksort(arr):\n    if len(arr) <= 1: return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)"}, "tags": ["algorithm", "sorting"], "created_at": "2025-07-18T08:24:16.672075"}
{"task_id": "algo_binary_search", "type": "algorithm_implementation", "source": "algorithm_collection", "problem_statement": "Implement the Binary Search algorithm, which is a Searching algorithm.", "context": {"description": "Efficient search algorithm for sorted arrays", "time_complexity": "O(log n)", "space_complexity": "O(1)"}, "solution": {"language": "Python", "code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target: return mid\n        elif arr[mid] < target: left = mid + 1\n        else: right = mid - 1\n    return -1"}, "tags": ["algorithm", "searching"], "created_at": "2025-07-18T08:24:16.672119"}
{"task_id": "challenge_two_sum", "type": "problem_solving", "source": "leetcode_style", "problem_statement": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.", "context": {"title": "Two Sum", "difficulty": "Easy", "category": "Array", "topics": ["Array", "Hash Table"]}, "solution": {"language": "Python", "code": "def two_sum_optimized(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []"}, "tags": ["challenge", "array", "array", "hash table"], "created_at": "2025-07-18T08:24:16.672948"}
